generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String               @id @default(uuid())
  createdAt        DateTime             @default(now()) @map("created_at")
  updatedAt        DateTime             @updatedAt @map("updated_at")
  email            String               @unique
  telephone        String?              @unique
  name             String?
  password         String
  verificationCode String?              @map("verification_code")
  breakInterval    Int?                 @default(10) @map("break_interval")
  intervalsCount   Int?                 @default(7) @map("intervals_count")
  workInterval     Int?                 @default(50) @map("work_interval")
  tasks            TaskTimeManagement[]
  todo             TaskTodo[]
  timeBlocks       TimeBlock[]
  timerSessions    TimerSession[]

  @@map("user")
}

model TaskTimeManagement {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  name        String
  isCompleted Boolean?  @default(false) @map("is_completed")
  userId      String    @map("user_id")
  priority    Priority?
  user        User      @relation(fields: [userId], references: [id])

  @@map("task_time_management")
}

model TaskTodo {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String
  isCompleted Boolean? @default(false) @map("is_completed")
  userId      String   @map("user_id")
  order       Int      @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])

  @@map("task_todo")
}

model TimeBlock {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  color     String?
  duration  Int
  order     Int      @default(1)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("time_block")
}

model TimerSession {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  isCompleted Boolean?     @default(false) @map("is_completed")
  userId      String       @map("user_id")
  rounds      TimerRound[]
  user        User         @relation(fields: [userId], references: [id])

  @@map("timer_session")
}

model TimerRound {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  totalSeconds   Int          @map("total_seconds")
  isCompleted    Boolean?     @default(false) @map("is_completed")
  timerSessionId String       @map("timer_session_id")
  timerSession   TimerSession @relation(fields: [timerSessionId], references: [id], onDelete: Cascade)

  @@map("timer_round")
}

enum Priority {
  low
  medium
  high
  urgent
  critical
}
